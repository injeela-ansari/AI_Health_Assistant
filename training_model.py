# -*- coding: utf-8 -*-
"""training_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pH1rrtH6hDv6vH-VHJgf6WmlVhzhEc6L
"""

import os

# This command confirms you are in the right place
print(f"Current working directory: {os.getcwd()}")

# --- Your existing code starts here ---
# (e.g., import pandas as pd, print("Training Diabetes Model..."), etc.)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import accuracy_score
import joblib

# Create the 'models' directory if it doesn't exist
if not os.path.exists('models'):
    os.makedirs('models')

# --- 1. Diabetes Model Training ---
print("Training Diabetes Model...")
diabetes_df = pd.read_csv('diabetes.csv')
X_diabetes = diabetes_df[['Glucose', 'BloodPressure', 'BMI', 'Age', 'Insulin']]
y_diabetes = diabetes_df['Outcome']
X_train_d, X_test_d, y_train_d, y_test_d = train_test_split(X_diabetes, y_diabetes, test_size=0.2, random_state=42)
diabetes_model = RandomForestClassifier(n_estimators=100, random_state=42)
diabetes_model.fit(X_train_d, y_train_d)
print(f"Diabetes Model Accuracy: {accuracy_score(y_test_d, diabetes_model.predict(X_test_d)) * 100:.2f}%")
joblib.dump(diabetes_model, 'models/diabetes_model.pkl')

# --- 2. Heart Disease Model Training ---
print("Training Heart Disease Model...")
heart_df = pd.read_csv('heart_disease_uci.csv')
# Preprocessing for heart disease dataset
heart_df = heart_df.apply(pd.to_numeric, errors='coerce')
# Instead of dropping all rows with NaNs, let's inspect the data
# heart_df = heart_df.dropna()
X_heart = heart_df[['age', 'trestbps', 'chol', 'thalch', 'oldpeak']]
y_heart = heart_df['num'] # Corrected column name
X_train_h, X_test_h, y_train_h, y_test_h = train_test_split(X_heart, y_heart, test_size=0.2, random_state=42)
heart_model = RandomForestClassifier(n_estimators=100, random_state=42)
heart_model.fit(X_train_h, y_train_h)
print(f"Heart Disease Model Accuracy: {accuracy_score(y_test_h, heart_model.predict(X_test_h)) * 100:.2f}%")
joblib.dump(heart_model, 'models/heart_disease_model.pkl')


# --- 3. Liver Disease Model Training ---
print("Training Liver Disease Model...")
liver_df = pd.read_csv('indian_liver_patient.csv')
# Preprocessing for liver disease dataset
liver_df['Gender'] = liver_df['Gender'].map({'Male': 1, 'Female': 0})
liver_df.dropna(inplace=True)
liver_df['Dataset'] = liver_df['Dataset'].apply(lambda x: 1 if x == 1 else 0)
X_liver = liver_df[['Total_Bilirubin', 'Alkaline_Phosphotase', 'Alamine_Aminotransferase', 'Total_Protiens', 'Albumin_and_Globulin_Ratio']]
y_liver = liver_df['Dataset']
X_train_l, X_test_l, y_train_l, y_test_l = train_test_split(X_liver, y_liver, test_size=0.2, random_state=42)
liver_model = RandomForestClassifier(n_estimators=100, random_state=42)
liver_model.fit(X_train_l, y_train_l)
print(f"Liver Disease Model Accuracy: {accuracy_score(y_test_l, liver_model.predict(X_test_l)) * 100:.2f}%")
joblib.dump(liver_model, 'models/liver_disease_model.pkl')


# --- 4. Obesity Model Training ---
print("Training Obesity Model...")
obesity_df = pd.read_csv('ObesityDataSet.csv')
# Preprocessing for obesity dataset
le = LabelEncoder()
for col in ['Gender', 'family_history_with_overweight', 'FAVC', 'CAEC', 'SMOKE', 'SCC', 'CALC', 'MTRANS', 'NObeyesdad']:
    obesity_df[col] = le.fit_transform(obesity_df[col])
X_obesity = obesity_df[['Age', 'Height', 'Weight', 'FCVC', 'CH2O']]
y_obesity = obesity_df['NObeyesdad']
X_train_o, X_test_o, y_train_o, y_test_o = train_test_split(X_obesity, y_obesity, test_size=0.2, random_state=42)
obesity_model = RandomForestClassifier(n_estimators=100, random_state=42)
obesity_model.fit(X_train_o, y_train_o)
print(f"Obesity Model Accuracy: {accuracy_score(y_test_o, obesity_model.predict(X_test_o)) * 100:.2f}%")
joblib.dump(obesity_model, 'models/obesity_model.pkl')


# --- 5. Insurance Cost Model Training ---
print("Training Insurance Cost Model...")
insurance_df = pd.read_csv('insurance.csv')
# Preprocessing for insurance dataset
for col in ['sex', 'smoker', 'region']:
    le = LabelEncoder()
    insurance_df[col] = le.fit_transform(insurance_df[col])
X_insurance = insurance_df[['age', 'bmi', 'children', 'smoker', 'sex']]
y_insurance = insurance_df['charges']
X_train_i, X_test_i, y_train_i, y_test_i = train_test_split(X_insurance, y_insurance, test_size=0.2, random_state=42)
insurance_model = RandomForestRegressor(n_estimators=100, random_state=42)
insurance_model.fit(X_train_i, y_train_i)
print(f"Insurance Model R2 Score: {insurance_model.score(X_test_i, y_test_i):.2f}")
joblib.dump(insurance_model, 'models/insurance_model.pkl')

print("\nAll models trained and saved successfully in the 'models/' directory!")



display(heart_df.columns)

display(heart_df.columns)

import pandas as pd

heart_df = pd.read_csv('heart_disease_uci.csv')
# Preprocessing for heart disease dataset
heart_df = heart_df.apply(pd.to_numeric, errors='coerce')

# Display the number of rows before and after dropping NaNs
print(f"Rows before dropping NaNs: {len(heart_df)}")
heart_df = heart_df.dropna()
print(f"Rows after dropping NaNs: {len(heart_df)}")

# Display the first few rows and the data types to understand the data
display(heart_df.head())
display(heart_df.info())