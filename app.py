# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VlYGORHa4XAB8V9PES9on-zblc9cY0nj
"""

# -*- coding: utf-8 -*-
"""Streamlit App for Health Assistant"""

import streamlit as st
import joblib
import numpy as np
import pandas as pd
from PIL import Image
import os

# --- PAGE CONFIGURATION ---
st.set_page_config(
    page_title="AI Personal Health Assistant",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- MODEL LOADING (CACHED) ---
@st.cache_resource
def load_all_models():
    # In a Colab environment, __file__ is not defined.
    # You need to specify the base path where your 'models' directory is located.
    # Replace '/content/' with the actual path if your models are elsewhere.
    # Use forward slashes for paths, especially in Colab (Linux environment).
    # Based on the file listing, models are directly in /content/
    base_path = '/content/'

    model_paths = {
        "diabetes": os.path.join(base_path, '/content/models/diabetes_model.pkl'),
        "heart": os.path.join(base_path, '/content/models/heart_disease_model.pkl'),
        "liver": os.path.join(base_path, '/content/models/liver_disease_model.pkl'),
        "obesity": os.path.join(base_path, '/content/models/obesity_model.pkl'),
        "insurance": os.path.join(base_path, '/content/models/insurance_model.pkl'),
    }

    models = {}
    for name, path in model_paths.items():
        if os.path.exists(path):
            try:
                models[name] = joblib.load(path)
            except Exception as e:
                st.error(f"‚ùå Failed to load {name} model: {e}")
                models[name] = None
        else:
            st.warning(f"‚ö†Ô∏è Model file not found: {path}")
            models[name] = None
    return models

models = load_all_models()

# --- SIDEBAR NAVIGATION ---
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", [
    "üè† Home & Symptom Checker",
    "ü©∫ Disease Prediction",
    "üî¨ Medical Image Analysis",
    "üí∞ Insurance Cost Prediction"
])

# --- STYLING ---
st.markdown("""
<style>
    .reportview-container {
        background: #f0f2f6;
    }
    .sidebar .sidebar-content {
        background: #ffffff;
    }
    h1, h2 {
        color: #0c4a6e;
    }
    .stButton>button {
        background-color: #0ea5e9;
        color: white;
        border-radius: 8px;
        border: none;
        padding: 10px 24px;
    }
    .stButton>button:hover {
        background-color: #0284c7;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# =================================================================================================
# --- PAGE 1: HOME & SYMPTOM CHECKER ---
# =================================================================================================
if page == "üè† Home & Symptom Checker":
    st.title("Welcome to Your AI Personal Health Assistant üëã")
    st.markdown("This tool is designed to help you understand your health better. Please select a feature from the navigation bar.")

    st.header("Symptom Checker & Recommender")
    st.markdown("Select your primary symptom to get potential reasons and remedies. **This is not a substitute for professional medical advice.**")

    symptom_data = {
        "Nausea": {
            "reasons": ["Indigestion", "Food Poisoning", "Motion Sickness", "Pregnancy"],
            "remedy": "Drink clear or ice-cold drinks. Eat light, bland foods. Avoid fried, greasy or sweet foods. Try ginger tea.",
            "precautions": "Avoid strong odors. Stay hydrated. If vomiting persists >24h, consult a doctor."
        },
        "Headache": {
            "reasons": ["Dehydration", "Stress", "Lack of Sleep", "Migraine", "Eye Strain"],
            "remedy": "Drink water. Rest in a quiet, dark room. Apply compress. Take mild pain relievers.",
            "precautions": "Sleep regularly, manage stress, take breaks from screens."
        },
        "Stomachache": {
            "reasons": ["Gas", "Indigestion", "Constipation", "Stomach Virus"],
            "remedy": "Drink water. Try ginger/mint tea. Light foods like bananas, rice, toast.",
            "precautions": "Avoid lying down after meals. Eat smaller, frequent meals. Severe pain ‚Üí doctor."
        },
        "Chest Pain": {
            "reasons": ["Muscle Strain", "Heartburn", "Anxiety", "Heart Attack (Emergency)"],
            "remedy": "Rest and ice for strain. Antacids for reflux.",
            "precautions": "If radiating pain + sweating/shortness of breath ‚Üí emergency services."
        }
    }

    symptom = st.selectbox("What is your main symptom?", list(symptom_data.keys()))

    if st.button("Analyze Symptom"):
        if symptom:
            data = symptom_data[symptom]
            st.subheader(f"Analysis for: {symptom}")
            st.info(f"**Possible Reasons:** {', '.join(data['reasons'])}")
            st.success(f"**Recommended Remedy:** {data['remedy']}")
            st.warning(f"**Precautions:** {data['precautions']}")

# =================================================================================================
# --- PAGE 2: DISEASE PREDICTION ---
# =================================================================================================
elif page == "ü©∫ Disease Prediction":
    st.title("Disease Prediction Models")
    disease = st.selectbox("Select a disease to predict", ["Diabetes", "Heart Disease", "Liver Disease", "Obesity"])

    st.markdown("---")

    if disease == "Diabetes":
        st.subheader("Diabetes Prediction")
        glucose = st.number_input("Glucose Level (mg/dL)", 0, 200, 120)
        bp = st.number_input("Blood Pressure (mm Hg)", 0, 130, 80)
        bmi = st.number_input("BMI (kg/m¬≤)", 0.0, 70.0, 25.0, format="%.1f")
        age = st.number_input("Age (years)", 1, 120, 30)
        insulin = st.number_input("Insulin Level (mu U/ml)", 0, 900, 80)

        if st.button("Predict Diabetes"):
            if models["diabetes"] is not None:
                prediction = models["diabetes"].predict([[glucose, bp, bmi, age, insulin]])
                if prediction[0] == 1:
                    st.error("High Risk of Diabetes.")
                else:
                    st.success("Low Risk of Diabetes.")
            else:
                st.error("‚ö†Ô∏è Diabetes model not available.")

    elif disease == "Heart Disease":
        st.subheader("Heart Disease Prediction")
        age = st.number_input("Age (years)", 1, 100, 50)
        trestbps = st.number_input("Resting BP (mm Hg)", 50, 200, 120)
        chol = st.number_input("Serum Cholesterol (mg/dl)", 100, 600, 200)
        thalach = st.number_input("Max Heart Rate Achieved", 50, 220, 150)
        oldpeak = st.number_input("ST Depression (exercise)", 0.0, 7.0, 1.0, format="%.1f")

        if st.button("Predict Heart Disease"):
            if models["heart"] is not None:
                prediction = models["heart"].predict([[age, trestbps, chol, thalach, oldpeak]])
                if prediction[0] == 1:
                    st.error("High Risk of Heart Disease.")
                else:
                    st.success("Low Risk of Heart Disease.")
            else:
                st.error("‚ö†Ô∏è Heart disease model not available.")

    elif disease == "Liver Disease":
        st.subheader("Liver Disease Prediction")
        age = st.number_input("Age (years)", 1, 100, 45)
        bilirubin = st.number_input("Total Bilirubin (mg/dL)", 0.0, 40.0, 1.2, format="%.1f")
        alk_phos = st.number_input("Alkaline Phosphatase (U/L)", 50, 4000, 240)
        alt = st.number_input("SGPT/ALT (U/L)", 0, 4000, 30)
        ast = st.number_input("SGOT/AST (U/L)", 0, 4000, 35)

        if st.button("Predict Liver Disease"):
            if models["liver"] is not None:
                prediction = models["liver"].predict([[age, bilirubin, alk_phos, alt, ast]])
                if prediction[0] == 1:
                    st.error("High Risk of Liver Disease.")
                else:
                    st.success("Low Risk of Liver Disease.")
            else:
                st.error("‚ö†Ô∏è Liver disease model not available.")

    elif disease == "Obesity":
        st.subheader("Obesity Risk Prediction")
        age = st.number_input("Age (years)", 1, 100, 25)
        height = st.number_input("Height (m)", 1.0, 2.5, 1.65, format="%.2f")
        weight = st.number_input("Weight (kg)", 20.0, 200.0, 70.0, format="%.1f")
        activity = st.number_input("Physical Activity (hrs/week)", 0.0, 40.0, 2.0, format="%.1f")
        screentime = st.number_input("Screen Time (hrs/day)", 0.0, 24.0, 3.0, format="%.1f")

        if st.button("Predict Obesity"):
            if models["obesity"] is not None:
                prediction = models["obesity"].predict([[age, height, weight, activity, screentime]])
                st.info(f"Predicted Obesity Category: {prediction[0]}")
            else:
                st.error("‚ö†Ô∏è Obesity model not available.")

# =================================================================================================
# --- PAGE 3: MEDICAL IMAGE ANALYSIS ---
# =================================================================================================
elif page == "üî¨ Medical Image Analysis":
    st.title("Medical Image Analysis")
    st.warning("This is a placeholder demo. Image ML models not integrated.")

    uploaded_file = st.file_uploader("Upload X-Ray or MRI image", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption='Uploaded Image', use_container_width=True)

        if st.button("Analyze Image"):
            st.info("Simulating analysis... (replace with ML model in future)")
            import time
            time.sleep(2)
            results = {
                "Asthma Risk": "Low",
                "Lung Cancer Risk": "Low",
                "COVID-19 Severity": "Mild",
                "Tumor Detection": "No Tumor Detected"
            }
            for k, v in results.items():
                st.metric(k, v)

# =================================================================================================
# --- PAGE 4: INSURANCE COST PREDICTION ---
# =================================================================================================
elif page == "üí∞ Insurance Cost Prediction":
    st.title("Medical Insurance Cost Prediction")
    st.markdown("Enter details to predict your annual insurance premium.")

    age = st.slider("Age (years)", 18, 100, 30)
    bmi = st.slider("BMI (kg/m¬≤)", 15.0, 55.0, 25.0, 0.1)
    children = st.slider("Children (count)", 0, 10, 0)
    sex = st.radio("Sex", ("Male", "Female"))
    smoker = st.radio("Smoker?", ("Yes", "No"))

    if st.button("Predict Insurance Cost"):
        if models["insurance"] is not None:
            sex_encoded = 1 if sex == "Male" else 0
            smoker_encoded = 1 if smoker == "Yes" else 0
            # Ensure the input to the model is a 2D array (or list of lists)
            prediction = models["insurance"].predict([[age, bmi, children, smoker_encoded, sex_encoded]])
            predicted_cost = float(prediction[0])
            st.success(f"Predicted Annual Insurance Cost: ‚Çπ{predicted_cost:,.2f}")
        else:
            st.error("‚ö†Ô∏è Insurance cost model not available.")

